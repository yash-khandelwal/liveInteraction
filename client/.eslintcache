[{"D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\JoinFrom\\JoinForm.jsx":"1","D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\Channel.jsx":"2","D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\index.js":"3","D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\PollsApp.jsx":"4","D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\ChatAll.jsx":"5","D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\QnAApp.jsx":"6","D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\StatSection.jsx":"7"},{"size":1697,"mtime":1610378505589,"results":"8","hashOfConfig":"9"},{"size":17145,"mtime":1610378615801,"results":"10","hashOfConfig":"9"},{"size":193,"mtime":1610378505590,"results":"11","hashOfConfig":"9"},{"size":4723,"mtime":1610379478618,"results":"12","hashOfConfig":"9"},{"size":1489,"mtime":1610378505440,"results":"13","hashOfConfig":"9"},{"size":5274,"mtime":1610378505568,"results":"14","hashOfConfig":"9"},{"size":186,"mtime":1610378505569,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q32opf",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\JoinFrom\\JoinForm.jsx",[],"D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\Channel.jsx",["32"],"import React, { useState, useEffect } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport io from \"socket.io-client\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport ChatApp from \"./ChatApp/ChatApp.jsx\";\r\nimport ChatAll from \"./ChatAll\";\r\nimport PollsApp from \"./PollsApp.jsx\";\r\nimport QnAApp from \"./QnAApp.jsx\";\r\nimport StatSection from \"./StatSection.jsx\";\r\n\r\nlet socket;\r\nlet mp = new Map();\r\n\r\nconst Channel = ({ location }) => {\r\n  //global states\r\n  const [interaction, setInteraction] = useState(\"Chat\");\r\n  const ENDPOINT = \"http://localhost:5001\";\r\n  const [users, setUsers] = useState([]);\r\n  const [userData, setuserData] = useState({\r\n    userName: \"\",\r\n    displayName: \"\",\r\n    channelId: \"\",\r\n    role: \"\",\r\n  });\r\n\r\n  //chat states\r\n  const [channelChatMessages, setChannelChatMessages] = useState([]);\r\n  const [sidepannel, setSidepannel] = useState(false);\r\n  const [channelChatMessage, setChannelChatMessage] = useState(\"\");\r\n  const [privateMessages, setPrivateMessages] = useState(new Map());\r\n\r\n  //question states\r\n  const [question, setQuestion] = useState(new Map());\r\n  // poll states\r\n  const [polls, setPolls] = useState(new Map());\r\n  const [pollIds, setPollIds] = useState([]);\r\n  const [createPoll, setCreatePoll] = useState(false);\r\n  const [pollQuestion, setPollQuestion] = useState(\"\");\r\n  const [optionList, setOptionList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const { username, displayname, channel, presenter } = queryString.parse(\r\n      location.search\r\n    );\r\n    console.log(username, displayname, channel, presenter);\r\n    setuserData({\r\n      userName: username,\r\n      displayName: displayname,\r\n      channelId: channel,\r\n      role: presenter === \"host\",\r\n    });\r\n    socket = io(ENDPOINT);\r\n    socket.on(\"connection\", (error) => {\r\n      if (error) {\r\n        console.log(error);\r\n      } else {\r\n        console.log(\"connected to backend\");\r\n      }\r\n    });\r\n    console.log(socket);\r\n    socket.emit(\r\n      \"join\",\r\n      {\r\n        userName: username,\r\n        displayName: displayname,\r\n        channel: channel,\r\n        role: presenter === \"host\",\r\n      },\r\n      (err) => {\r\n        if (err) {\r\n          alert(err);\r\n        }\r\n      }\r\n    );\r\n  }, [ENDPOINT, location.search]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"newConnect\", (data) => {\r\n      mp.set(data.user.id, data.user.userName);\r\n      setUsers((prevUsers) => [...prevUsers, data.user]);\r\n      setPrivateMessages(\r\n        (prev) =>\r\n          new Map([\r\n            ...prev,\r\n            [data.user.userName, { active: true, messages: [], unread: 0 }],\r\n          ])\r\n      );\r\n      // console.log(mp);\r\n    });\r\n    socket.on(\"userDisconnect\", (userId) => {\r\n      mp.delete(userId);\r\n      setUsers((prevUsers) => {\r\n        return prevUsers.filter((user) => user.id !== userId);\r\n      });\r\n      setPrivateMessages((prevPrivateMessages) => {\r\n        prevPrivateMessages.set(mp.get(userId), { active: true, messages: [] });\r\n        return prevPrivateMessages;\r\n      });\r\n      // console.log(mp);\r\n    });\r\n    socket.on(\"channelMessage\", (data) => {\r\n      setChannelChatMessages((prevChatMessages) => {\r\n        return [...prevChatMessages, data];\r\n      });\r\n    });\r\n    // will happen only when client starts streaming\r\n    socket.on(\"channelData\", (data) => {\r\n      var privatemsg = new Map();\r\n      data.users.map((user) => {\r\n        mp.set(user.id, user.userName);\r\n        privatemsg.set(user.userName, {\r\n          active: true,\r\n          messages: [],\r\n          unread: 0,\r\n        });\r\n        return true;\r\n      });\r\n      // console.log(privatemsg);\r\n      setPrivateMessages(privatemsg);\r\n      // console.log(\"privateMessages: \", privateMessages);\r\n      setUsers(data.users);\r\n      // console.log(mp);\r\n    });\r\n    socket.on(\"infoMessage\", (data) => {\r\n      setChannelChatMessages((prevChatMessages) => {\r\n        return [\r\n          ...prevChatMessages,\r\n          {\r\n            user: \"info\",\r\n            text: data.info,\r\n          },\r\n        ];\r\n      });\r\n    });\r\n    socket.on(\"privateMessage\", (data) => {\r\n      console.log(\"aayaa toh\");\r\n      console.log(data);\r\n      // console.log(privateMessages);\r\n      setUsers((prevUsers) => {\r\n        let newUsers = [data.from];\r\n        prevUsers = prevUsers.filter((prev) => {\r\n          if (prev.userName !== data.from) {\r\n            return true;\r\n          } else {\r\n            newUsers[0] = prev;\r\n            return false;\r\n          }\r\n        });\r\n        newUsers = [...newUsers, ...prevUsers];\r\n        console.log(newUsers);\r\n        return newUsers;\r\n      });\r\n      setPrivateMessages((prevPrivateMessages) => {\r\n        console.log(prevPrivateMessages);\r\n        let { messages, unread } = prevPrivateMessages.get(data.from);\r\n        console.log(messages, unread);\r\n        // messageArr = messageArr.messages;\r\n        if (!messages) {\r\n          messages = [];\r\n        }\r\n        messages.push({\r\n          user: data.fromDisplayName,\r\n          text: data.message,\r\n        });\r\n        prevPrivateMessages.set(data.from, {\r\n          active: true,\r\n          messages: messages,\r\n          unread: unread + 1,\r\n        });\r\n        // console.log(prevPrivateMessages);\r\n        return new Map(prevPrivateMessages);\r\n      });\r\n      // console.log(privateMessages);\r\n    });\r\n    socket.on(\"newPoll\", (data) => {\r\n      console.log(\"poll aya aya aya aya\");\r\n      setPolls((prevPolls) => {\r\n        prevPolls.set(data.id, { ...data, voted: false });\r\n        console.log(prevPolls.get(data.id));\r\n        return new Map(prevPolls);\r\n      });\r\n      setPollIds((prev) => [...prev, data.id]);\r\n    });\r\n    socket.on(\"channelQuestion\", (data) => {\r\n      // console.log(question)\r\n      setQuestion((prevChatMessages) => {\r\n        prevChatMessages.set(data.id, data);\r\n        return new Map(prevChatMessages);\r\n      });\r\n    });\r\n\r\n    socket.on(\"channelAnswer\", (data) => {\r\n      setQuestion((prevQues) => {\r\n        let ques = prevQues.get(data.index);\r\n        ques.answer.push(data.answer);\r\n        prevQues.set(data.index, ques);\r\n        return new Map(prevQues);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const sendChatMessageToChannel = () => {\r\n    const data = {\r\n      from: userData.userName,\r\n      fromDisplayName: userData.displayName,\r\n      to: userData.channelId,\r\n      message: channelChatMessage,\r\n    };\r\n    socket.emit(\"sendChatMessageToChannel\", data, () => {\r\n      setChannelChatMessage(\"\");\r\n    });\r\n  };\r\n\r\n  const sendChatMessageToUser = ({ toSocket, to, message }) => {\r\n    const data = {\r\n      from: userData.userName,\r\n      fromDisplayName: userData.displayName,\r\n      toSocket: toSocket,\r\n      to: to,\r\n      message: message,\r\n    };\r\n    socket.emit(\"sendChatMessageToUser\", data, () => {\r\n      setUsers((prevUsers) => {\r\n        let newUsers = [data.to];\r\n        prevUsers = prevUsers.filter((prev) => {\r\n          if (prev.userName !== data.to) {\r\n            return true;\r\n          } else {\r\n            newUsers[0] = prev;\r\n            return false;\r\n          }\r\n        });\r\n        newUsers = [...newUsers, ...prevUsers];\r\n        console.log(newUsers);\r\n        return newUsers;\r\n      });\r\n      setPrivateMessages((prevPrivateMessages) => {\r\n        console.log(prevPrivateMessages);\r\n        let messageArr = prevPrivateMessages.get(data.to).messages;\r\n        // messageArr = messageArr.messages;\r\n        if (!messageArr) {\r\n          messageArr = [];\r\n        }\r\n        messageArr.push({\r\n          user: data.from,\r\n          text: data.message,\r\n        });\r\n        prevPrivateMessages.set(data.to, {\r\n          active: true,\r\n          messages: messageArr,\r\n          unread: 0,\r\n        });\r\n        console.log(prevPrivateMessages);\r\n        return new Map(prevPrivateMessages);\r\n      });\r\n      console.log(\"nothing\");\r\n    });\r\n  };\r\n\r\n  const sendPoll = (pollData) => {\r\n    // console.log(pollData);\r\n    socket.emit(\r\n      \"sendPoll\",\r\n      {\r\n        user: userData,\r\n        question: pollData.pollQuestion,\r\n        options: pollData.optionList,\r\n      },\r\n      () => {\r\n        console.log(\"poll publish success\");\r\n      }\r\n    );\r\n  };\r\n  const sendVote = (id, optionNum) => {\r\n    socket.emit(\"vote\", { id, optionNum }, () => {\r\n      setPolls((prev) => {\r\n        prev.get(id).voted = optionNum;\r\n        console.log(prev.get(id));\r\n        return new Map(prev);\r\n      });\r\n    });\r\n  };\r\n\r\n  const sendVoteUpdate = (id, prevOptionNum, newOptionNum) => {\r\n    console.log(\"sendVoteUpdate triggered\");\r\n    socket.emit(\"voteUpdate\", { id, prevOptionNum, newOptionNum }, () => {\r\n      setPolls((prev) => {\r\n        prev.get(id).voted = newOptionNum;\r\n        console.log(prev.get(id));\r\n        return new Map(prev);\r\n      });\r\n    });\r\n  };\r\n\r\n  const sendQuestionToChannel = (formData) => {\r\n    const data = {\r\n      id: uuidv4(),\r\n      from: userData.userName,\r\n      fromDisplayName: userData.displayName,\r\n      to: userData.channelId,\r\n      question: formData,\r\n      answer: [],\r\n      likes: [],\r\n    };\r\n    socket.emit(\"sendQuestionToChannel\", data, () => {});\r\n  };\r\n  const sendAnswer = (index, answer) => {\r\n    const ansobj = {\r\n      answer,\r\n      from: userData.userName,\r\n      display: userData.displayName,\r\n    };\r\n    const data = { index, answer: ansobj, to: userData.channelId };\r\n    console.log(index, answer);\r\n    socket.emit(\"sendAnswerToChannel\", data, () => {});\r\n  };\r\n  const likeQuestion = (index, answer) => {\r\n    const data = { index, id: userData.userName };\r\n    console.log(index, answer);\r\n    socket.emit(\"sendlikeQuestion\", data, () => {});\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <StatSection users={users} />\r\n      <h3>Channel: {userData.channelId}</h3>\r\n      <h3>userName: {userData.userName}</h3>\r\n      <div>\r\n        <button\r\n          onClick={(e) => {\r\n            setInteraction(\"Chat\");\r\n          }}\r\n        >\r\n          Chat\r\n        </button>\r\n        <button\r\n          onClick={(e) => {\r\n            setInteraction(\"Polls\");\r\n          }}\r\n        >\r\n          Polls\r\n        </button>\r\n        <button\r\n          onClick={(e) => {\r\n            setInteraction(\"QnA\");\r\n          }}\r\n        >\r\n          QnA\r\n        </button>\r\n      </div>\r\n      {interaction === \"Chat\" && (\r\n        <ChatApp\r\n          messages={channelChatMessages}\r\n          message={channelChatMessage}\r\n          setMessage={setChannelChatMessage}\r\n          sendMessageToChannel={sendChatMessageToChannel}\r\n          sendMessageToUser={sendChatMessageToUser}\r\n          users={users}\r\n          privateMessages={privateMessages}\r\n          userData={userData}\r\n          setPrivateMessages={setPrivateMessages}\r\n        />\r\n      )}\r\n      {interaction === \"Polls\" && <p> Check Side</p>}\r\n      {interaction === \"QnA\" && <p>Check sidepannel</p>}\r\n\r\n      <div>\r\n        <div\r\n          id=\"mySidepanel\"\r\n          className={`sidepanel ${\r\n            sidepannel ? \"sidepanel-open\" : \"sidepanel-closed\"\r\n          }`}\r\n        >\r\n          <div>\r\n            <ul\r\n              className=\"nav nav-pills mb-3 text-center px-1 justify-content-around\"\r\n              id=\"pills-tab\"\r\n              role=\"tablist\"\r\n            >\r\n              <li className=\"nav-item\" role=\"presentation\">\r\n                <a\r\n                  className=\"nav-link active\"\r\n                  id=\"pills-home-tab\"\r\n                  data-toggle=\"pill\"\r\n                  href=\"#pills-home\"\r\n                  role=\"tab\"\r\n                  aria-controls=\"pills-home\"\r\n                  aria-selected=\"true\"\r\n                >\r\n                  <i className=\"far fa-comments\" />\r\n                  Chat\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\" role=\"presentation\">\r\n                <a\r\n                  className=\"nav-link\"\r\n                  id=\"pills-profile-tab\"\r\n                  data-toggle=\"pill\"\r\n                  href=\"#pills-profile\"\r\n                  role=\"tab\"\r\n                  aria-controls=\"pills-profile\"\r\n                  aria-selected=\"false\"\r\n                >\r\n                  <i className=\"fas fa-poll\" />\r\n                  Polls\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\" role=\"presentation\">\r\n                <a\r\n                  className=\"nav-link\"\r\n                  id=\"pills-contact-tab\"\r\n                  data-toggle=\"pill\"\r\n                  href=\"#pills-contact\"\r\n                  role=\"tab\"\r\n                  aria-controls=\"pills-contact\"\r\n                  aria-selected=\"false\"\r\n                >\r\n                  <i className=\"far fa-comment-alt\" />\r\n                  Q&amp;A\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div className=\"tab-content text-white\" id=\"pills-tabContent\">\r\n              <div\r\n                className=\"tab-pane fade show active\"\r\n                id=\"pills-home\"\r\n                role=\"tabpanel\"\r\n                aria-labelledby=\"pills-home-tab\"\r\n              >\r\n                <ul\r\n                  className=\"nav nav-pills mb-3 justify-content-center\"\r\n                  id=\"pills-tab text-center\"\r\n                  role=\"tablist\"\r\n                >\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <a\r\n                      className=\"nav-link active text-center\"\r\n                      id=\"pills-public-tab\"\r\n                      data-toggle=\"pill\"\r\n                      href=\"#pills-public\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-public\"\r\n                      aria-selected=\"true\"\r\n                      style={{ width: \"13rem\" }}\r\n                    >\r\n                      Public\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <a\r\n                      className=\"nav-link text-center\"\r\n                      id=\"pills-private-tab\"\r\n                      data-toggle=\"pill\"\r\n                      href=\"#pills-private\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-private\"\r\n                      aria-selected=\"false\"\r\n                      style={{ width: \"13rem\" }}\r\n                    >\r\n                      Attendee\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n                <div className=\"tab-content\" id=\"pills-tabContent\">\r\n                  <div\r\n                    className=\"tab-pane fade show active px-2\"\r\n                    id=\"pills-public\"\r\n                    role=\"tabpanel\"\r\n                    aria-labelledby=\"pills-public-tab\"\r\n                  >\r\n                    <ChatAll\r\n                      messages={channelChatMessages}\r\n                      message={channelChatMessage}\r\n                      setMessage={setChannelChatMessage}\r\n                      sendMessage={sendChatMessageToChannel}\r\n                    />\r\n                  </div>\r\n                  <div\r\n                    className=\"tab-pane fade\"\r\n                    id=\"pills-private\"\r\n                    role=\"tabpanel\"\r\n                    aria-labelledby=\"pills-private-tab\"\r\n                  >\r\n                    Hello123\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"tab-pane fade px-2\"\r\n                id=\"pills-profile\"\r\n                role=\"tabpanel\"\r\n                aria-labelledby=\"pills-profile-tab\"\r\n              >\r\n                <br />\r\n                <br />\r\n                <PollsApp\r\n                  socket={socket}\r\n                  role={true}\r\n                  polls={polls}\r\n                  publishPoll={sendPoll}\r\n                  createPoll={createPoll}\r\n                  setCreatePoll={setCreatePoll}\r\n                  pollQuestion={pollQuestion}\r\n                  setPollQuestion={setPollQuestion}\r\n                  optionList={optionList}\r\n                  setOptionList={setOptionList}\r\n                  pollIds={pollIds}\r\n                  sendVote={sendVote}\r\n                  sendVoteUpdate={sendVoteUpdate}\r\n                />\r\n              </div>\r\n              <div\r\n                className=\"tab-pane fade px-2\"\r\n                id=\"pills-contact\"\r\n                role=\"tabpanel\"\r\n                aria-labelledby=\"pills-contact-tab\"\r\n              >\r\n                <QnAApp\r\n                  role={userData.role}\r\n                  question={question}\r\n                  sendQuestionToChannel={sendQuestionToChannel}\r\n                  sendAnswer={sendAnswer}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          className=\"openbtn\"\r\n          onClick={(e) => {\r\n            setSidepannel(!sidepannel);\r\n          }}\r\n        >\r\n          ☰{\" \"}\r\n        </button>\r\n        <a href=\"#!\" className=\"closebtn\" onclick=\"closeNav()\">\r\n          ×\r\n        </a>\r\n        <h2>Collapsed Sidepanel</h2>\r\n        <p>Click on the hamburger menu/bar icon to open the sidepanel.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Channel;\r\n","D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\index.js",[],["33","34"],"D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\PollsApp.jsx",["35"],"D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\ChatAll.jsx",[],"D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\QnAApp.jsx",[],"D:\\ENTERTAINMENT\\_study_videos\\WEB_DEV_MERN\\Web_Development\\_Internship_growthgear\\chatcomponent\\client\\src\\components\\Channel\\StatSection.jsx",[],{"ruleId":"36","severity":1,"message":"37","line":318,"column":9,"nodeType":"38","messageId":"39","endLine":318,"endColumn":21},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"36","severity":1,"message":"44","line":42,"column":9,"nodeType":"38","messageId":"39","endLine":42,"endColumn":24},"no-unused-vars","'likeQuestion' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["45"],"no-negated-in-lhs",["46"],"'sendTestMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]